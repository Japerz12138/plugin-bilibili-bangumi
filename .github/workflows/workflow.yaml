name: Build Plugin JAR File

on:
  push:
    branches: [ main ]
  release:
    types:
      - created
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          cache: 'gradle'
          java-version: 21
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 10.12.4
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/console/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install Frontend Dependencies
        env:
          NODE_OPTIONS: "--max-old-space-size=4096 --experimental-modules"
          NODE_ENV: "production"
        run: |
          cd console
          pnpm install
          cd ..
      - name: Build with Gradle
        env:
          NODE_OPTIONS: "--max-old-space-size=4096 --experimental-modules"
          NODE_ENV: "production"
        run: |
          # Debug information
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          
          # Set the version with tag name when releasing, otherwise keep current version
          if [ "${{ github.event_name }}" = "release" ] && [ -n "${{ github.event.release.tag_name }}" ]; then
            version=${{ github.event.release.tag_name }}
            version=${version#v}
            sed -i "s/version=.*-SNAPSHOT$/version=$version/1" gradle.properties
          fi
          ./gradlew clean build -x test
      - name: Archive plugin jar
        uses: actions/upload-artifact@v4
        with:
          name: plugin-bilibili-bangumi
          path: |
            build/libs/*.jar
          retention-days: 1

  github-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Debug Event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Release ID: ${{ github.event.release.id }}"
      - name: Download plugin jar
        uses: actions/download-artifact@v4
        with:
          name: plugin-bilibili-bangumi
          path: build/libs
      - name: Get Name of Artifact
        id: get_artifact
        run: |
          ARTIFACT_PATHNAME=$(ls build/libs/*.jar | head -n 1)
          ARTIFACT_NAME=$(basename ${ARTIFACT_PATHNAME})
          echo "Artifact pathname: ${ARTIFACT_PATHNAME}"
          echo "Artifact name: ${ARTIFACT_NAME}"
          echo "ARTIFACT_PATHNAME=${ARTIFACT_PATHNAME}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
          echo "RELEASE_ID=${{ github.event.release.id }}" >> $GITHUB_ENV
      - name: Upload a Release Asset
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('environment', process.versions);

            const fs = require('fs').promises;

            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });

            const releaseId = process.env.RELEASE_ID
            const artifactPathName = process.env.ARTIFACT_PATHNAME
            const artifactName = process.env.ARTIFACT_NAME
            console.log('Releasing', releaseId, artifactPathName, artifactName)

            try {
              await github.rest.repos.uploadReleaseAsset({
                owner, repo,
                release_id: releaseId,
                name: artifactName,
                data: await fs.readFile(artifactPathName)
              });
              console.log('Release asset uploaded successfully');
            } catch (error) {
              console.error('Error uploading release asset:', error);
              throw error;
            }

  # Optional: Create draft release for manual triggers
  create-draft-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Debug Event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
      - name: Download plugin jar
        uses: actions/download-artifact@v4
        with:
          name: plugin-bilibili-bangumi
          path: build/libs
      - name: Get Name of Artifact
        id: get_artifact
        run: |
          ARTIFACT_PATHNAME=$(ls build/libs/*.jar | head -n 1)
          ARTIFACT_NAME=$(basename ${ARTIFACT_PATHNAME})
          echo "Artifact pathname: ${ARTIFACT_PATHNAME}"
          echo "Artifact name: ${ARTIFACT_NAME}"
          echo "ARTIFACT_PATHNAME=${ARTIFACT_PATHNAME}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
      - name: Create Draft Release
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;
            const { repo: { owner, repo } } = context;
            
            const artifactPathName = process.env.ARTIFACT_PATHNAME;
            const artifactName = process.env.ARTIFACT_NAME;
            const version = artifactName.replace('.jar', '').split('-').pop();
            
            console.log('Creating draft release for version:', version);
            
            try {
              // Create draft release
              const release = await github.rest.repos.createRelease({
                owner, repo,
                tag_name: `v${version}`,
                name: `Plugin Bilibili Bangumi v${version}`,
                body: `## 更新内容\n\n- 自动构建的插件版本\n- 构建时间: ${new Date().toISOString()}`,
                draft: true,
                prerelease: false
              });
              
              // Upload artifact to the draft release
              await github.rest.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: artifactName,
                data: await fs.readFile(artifactPathName)
              });
              
              console.log('Draft release created:', release.data.html_url);
            } catch (error) {
              console.error('Error creating release:', error);
              throw error;
            }
